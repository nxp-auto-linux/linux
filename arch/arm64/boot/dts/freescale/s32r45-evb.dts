// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright 2019-2022 NXP
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

/dts-v1/;
#include "s32r45.dtsi"
#include "s32cc-nxp-flash-macronix.dtsi"

/ {
	model = "NXP S32R458-EVB";

	chosen {
		stdout-path = "serial0:115200n8";
	};
};

&generic_timer {
	clock-frequency = <5000000>;
};

&can0 {
	pinctrl-names = "default";
	pinctrl-0 = <&can0_pins>;
	status = "okay";
};

&can1 {
	pinctrl-names = "default";
	pinctrl-0 = <&can1_pins>;
	status = "okay";
};

&can2 {
	pinctrl-names = "default";
	pinctrl-0 = <&can2_pins>;
	status = "okay";
};

&can3 {
	pinctrl-names = "default";
	pinctrl-0 = <&can3_pins>;
	status = "okay";
};

&can4 {
	pinctrl-names = "default";
	pinctrl-0 = <&can4_pins>;
};

&can5 {
	pinctrl-names = "default";
	pinctrl-0 =  <&can5_pins>;
	status = "okay";
};

&can6 {
	pinctrl-names = "default";
	pinctrl-0 =  <&can6_pins>;
};

&can7 {
	pinctrl-names = "default";
	pinctrl-0 =  <&can7_pins>;
	status = "okay";
};

&swt3 {
	status = "okay";
};

&swt4 {
	status = "okay";
};

&swt5 {
	status = "okay";
};

&swt6 {
	status = "okay";
};

&pit0 {
	status = "okay";
};

&pit1 {
	status = "okay";
};

&pinctrl {
	status = "okay";

	can0_pins: can0_pins {
		can0_grp0 {
			pinmux = <S32CC_PINMUX(44, FUNC1)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can0_grp1 {
			pinmux = <S32CC_PINMUX(43, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can0_grp2 {
			pinmux = <S32CC_PINMUX(513, FUNC2)>;
		};
	};

	can1_pins: can1_pins {
		can1_grp0 {
			pinmux = <S32CC_PINMUX(62, FUNC3)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can1_grp1 {
			pinmux = <S32CC_PINMUX(7, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can1_grp2 {
			pinmux = <S32CC_PINMUX(658, FUNC3)>;
		};
	};

	can2_pins: can2_pins {
		can2_grp0 {
			pinmux = <S32CC_PINMUX(19, FUNC1)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can2_grp1 {
			pinmux = <S32CC_PINMUX(124, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can2_grp2 {
			pinmux = <S32CC_PINMUX(617, FUNC3)>;
		};
	};

	can3_pins: can3_pins {
		can3_grp0 {
			pinmux = <S32CC_PINMUX(119, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can3_grp1 {
			pinmux = <S32CC_PINMUX(619, FUNC3)>;
		};

		can3_grp2 {
			pinmux = <S32CC_PINMUX(18, FUNC4)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};
	};

	can4_pins: can4_pins {
		can4_grp0 {
			pinmux = <S32CC_PINMUX(121, FUNC3)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can4_grp1 {
			pinmux = <S32CC_PINMUX(103, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can4_grp2 {
			pinmux = <S32CC_PINMUX(633, FUNC3)>;
		};
	};

	can5_pins: can5_pins {
		can5_grp0 {
			pinmux = <S32CC_PINMUX(112, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can5_grp1 {
			pinmux = <S32CC_PINMUX(635, FUNC3)>;
		};

		can5_grp2 {
			pinmux = <S32CC_PINMUX(34, FUNC3)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};
	};

	can6_pins: can6_pins {
		can6_grp0 {
			pinmux = <S32CC_PINMUX(102, FUNC3)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can6_grp1 {
			pinmux = <S32CC_PINMUX(104, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can6_grp2 {
			pinmux = <S32CC_PINMUX(655, FUNC3)>;
		};
	};

	can7_pins: can7_pins {
		can7_grp0 {
			pinmux = <S32CC_PINMUX(120, FUNC3)>;
			output-enable;
			slew-rate = <S32CC_SLEW_150MHZ>;
		};

		can7_grp1 {
			pinmux = <S32CC_PINMUX(123, FUNC0)>;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		can7_grp2 {
			pinmux = <S32CC_PINMUX(657, FUNC3)>;
		};
	};

	qspi_pins: qspi_pins {
		qspi_grp0 {
			pinmux = <S32CC_PINMUX(93, FUNC1)>,
				 <S32CC_PINMUX(97, FUNC1)>,
				 <S32CC_PINMUX(98, FUNC1)>,
				 <S32CC_PINMUX(99, FUNC1)>;
			output-enable;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
			bias-pull-down;
		};

		qspi_grp1 {
			pinmux = <S32CC_PINMUX(548, FUNC2)>,
				 <S32CC_PINMUX(540, FUNC2)>,
				 <S32CC_PINMUX(541, FUNC2)>,
				 <S32CC_PINMUX(542, FUNC2)>,
				 <S32CC_PINMUX(543, FUNC2)>,
				 <S32CC_PINMUX(544, FUNC2)>,
				 <S32CC_PINMUX(545, FUNC2)>,
				 <S32CC_PINMUX(546, FUNC2)>,
				 <S32CC_PINMUX(547, FUNC2)>;
		};

		qspi_grp2 {
			pinmux = <S32CC_PINMUX(100, FUNC1)>,
				 <S32CC_PINMUX(101, FUNC1)>,
				 <S32CC_PINMUX(96, FUNC1)>;
			output-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

		qspi_grp3 {
			pinmux = <S32CC_PINMUX(85, FUNC1)>,
				 <S32CC_PINMUX(86, FUNC1)>,
				 <S32CC_PINMUX(87, FUNC1)>,
				 <S32CC_PINMUX(88, FUNC1)>,
				 <S32CC_PINMUX(89, FUNC1)>,
				 <S32CC_PINMUX(90, FUNC1)>,
				 <S32CC_PINMUX(91, FUNC1)>,
				 <S32CC_PINMUX(92, FUNC1)>;
			output-enable;
			input-enable;
			slew-rate = <S32CC_SLEW_208MHZ>;
		};

	};
};

&edma0 {
	status = "okay";
};

&edma1 {
	status = "okay";
};

&usdhc0 {
	no-1-8-v;
	status = "okay";
};

&qspi {
	pinctrl-names = "default";
	pinctrl-0 = <&qspi_pins>;
	status = "okay";

	mx25uw51245g@0 {
		spi-max-frequency = <133333333>;
		nxp,spi-no-functional-reset;
	};
};
