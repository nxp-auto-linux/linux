# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/pci/fsl,s32-pcie.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: NXP S32 PCIe interface

maintainers:
  - Bogdan Hamciuc <bogdan.hamciuc@nxp.com>

description: |
  This PCIe host controller is based on the Synopsys DesignWare PCIe IP
  and thus inherits all the common properties defined in designware-pcie.txt.

properties:
  compatible:
    oneOf:
      - enum:
          - "fsl,s32v234-pcie"  # S32V234 SoCs
          - "fsl,s32gen1-pcie"  # S32Gen1 SoCs RC mode
          - "fsl,s32gen1-pcie-ep"  # S32Gen1 SoCs EP mode

  reg:
    description: base address and length of the PCIe controller

  interrupts:
    description: A list of interrupt outputs of the controller. Must contain an
      entry for each item in the interrupt-names property.

  fsl,phy-mode:
    description: Select PHY mode for PCIe controller
    oneOf:
      - items:
          - const: "crns"  # Common Reference Clock, No Spread Spectrum
          - const: "crss"  # Common Reference Clock, Spread Spectrum
          - const: "sris"  # Separate Reference Clock, Spread Spectrum

  interrupt-names:
    items:
      - const: "link_req_rst_not"
      - const: "dma"
      - const: "msi"

  msi-parent:
    description: |
      Use this option pointing to the GIC controller node which will
      handle the MSIs. This property can be used only in Root Complex case.
      By default, MSIs are handled by iMSI-RX -Integrated MSI Receiver
      [AXI Bridge]-, an integrated MSI reception module in AXI Bridge which
      detects and terminates inbound MSI requests (received on the RX wire).
      These MSIs will no longer appear on the AXI bus. The disadvantage of this
      approach is that only one hardware interrupt can be used, the one named
      "msi" from the interrupt list, which will make impossible MSIs balancing
      between several cores. If one wants to use more than one hardware
      interrupt, iMSI-RX should be skipped and MSIs should be generated as SPIs.
      This can be achived by adding the "msi-parent" property. The msi-parent
      should be declared as "msi-controller" and the list of available SPIs that
      can be used will be declared using "mbi-ranges".

required:
  - compatible
  - reg
  - interrupts
  - interrupt-names
  - ranges
  - nxp,phy-mode

additionalProperties: true

examples:
  - |

    bus {
        #address-cells = <2>;
        #size-cells = <2>;

        pcie: pcie@72000000 {
          compatible = "fsl,s32v234-pcie";
          reg = <0 0x72ffc000 0 0x4000>, <0 0x72f00000 0 0x80000>;
          reg-names = "dbi", "config";
          #address-cells = <3>;
          #size-cells = <2>;
          device_type = "pci";
          ranges = <0x81000000 0x0 0x0 0x0 0x72f80000 0x0 0x00010000>,
                    /* downstream I/O */
                    <0x82000000 0x0 0x72000000 0x0 0x72000000 0x0 0x00f00000>;
                    /* non-prefetchable memory */
          num-lanes = <1>;
          bus-range = <0x0 0xff>;
          interrupts =  <0 103 4>, <0 104 4>, <0 105 4>;
          interrupt-names = "link_req_rst_not", "dma","msi";
          #interrupt-cells = <1>;
          interrupt-map-mask = <0 0 0 0x7>;
          interrupt-map = <0 0 0 1 &gic 0 108 4>,
              <0 0 0 2 &gic 0 107 4>,
              <0 0 0 3 &gic 0 106 4>,
              <0 0 0 4 &gic 0 105 4>;
          status = "disabled";
        };
      };
